"""Test Download Report Functionality on Production API."""

import json

import requests

# Production API
BASE_URL = "https://babyshield.cureviax.ai"


def test_download_report_production() -> None:
    """Test report download on production API
    Note: This requires authentication which we don't have in this test.
    """
    print("=" * 80)
    print("üß™ Testing Download Report on Production API")
    print("=" * 80)

    # Test 1: Try to generate a report (will likely fail without auth)
    print("\nüìù Test 1: Check Report Generation Endpoint")
    print("-" * 80)

    payload = {
        "user_id": 12345,
        "report_type": "product_safety",
        "format": "pdf",
        "date_range": 90,
        "product_name": "Baby Einstein Activity Jumper",
        "barcode": "0074451090361",
        "model_number": "90361",
    }

    try:
        response = requests.post(f"{BASE_URL}/api/v1/baby/reports/generate", json=payload, timeout=30)

        print(f"Status Code: {response.status_code}")

        if response.status_code == 200:
            data = response.json()
            print("‚úÖ Report generated successfully!")
            print(f"   Report ID: {data.get('report_id')}")
            print(f"   Download URL: {data.get('download_url')}")
            print(f"   File Size: {data.get('file_size_kb')} KB")
        elif response.status_code == 401:
            print("‚ö†Ô∏è Unauthorized - Authentication required (expected)")
            print("   This endpoint requires a valid user token")
        elif response.status_code == 503:
            print("‚ö†Ô∏è Service unavailable - Report generation service not initialized")
        else:
            print(f"Status: {response.status_code}")
            try:
                print(f"Response: {json.dumps(response.json(), indent=2)}")
            except (json.JSONDecodeError, ValueError):
                # Invalid JSON response
                print(f"Response: {response.text[:500]}")

    except requests.exceptions.ConnectionError:
        print(f"‚ùå Connection error - Cannot reach {BASE_URL}")
    except requests.exceptions.Timeout:
        print("‚ùå Request timed out")
    except Exception as e:
        print(f"‚ùå Error: {e}")

    # Test 2: Check if endpoint exists (should return 401/403, not 404)
    print("\nüîç Test 2: Verify Endpoint Exists")
    print("-" * 80)

    try:
        # Try GET on download endpoint (should fail with auth error, not 404)
        response = requests.get(f"{BASE_URL}/api/v1/baby/reports/download/test-report-id", timeout=10)

        print(f"Status Code: {response.status_code}")

        if response.status_code == 401:
            print("‚úÖ Endpoint exists (authentication required)")
        elif response.status_code == 403:
            print("‚úÖ Endpoint exists (forbidden without proper auth)")
        elif response.status_code == 404:
            print("‚ùå Endpoint not found (404)")
            print("   The download endpoint may not be registered")
        else:
            print(f"Response status: {response.status_code}")

    except Exception as e:
        print(f"‚ùå Error: {e}")

    # Test 3: Check API health
    print("\nüíö Test 3: Check API Health")
    print("-" * 80)

    try:
        response = requests.get(f"{BASE_URL}/healthz", timeout=10)
        print(f"Status Code: {response.status_code}")

        if response.status_code == 200:
            print("‚úÖ API is healthy and running")
        else:
            print(f"‚ö†Ô∏è Health check returned {response.status_code}")

    except Exception as e:
        print(f"‚ùå Health check failed: {e}")

    # Test 4: Check API documentation
    print("\nüìö Test 4: Check API Documentation")
    print("-" * 80)

    try:
        response = requests.get(f"{BASE_URL}/docs", timeout=10)
        print(f"Status Code: {response.status_code}")

        if response.status_code == 200:
            print("‚úÖ API documentation is accessible")
            print(f"   Visit: {BASE_URL}/docs")
        else:
            print(f"‚ö†Ô∏è Documentation returned {response.status_code}")

    except Exception as e:
        print(f"‚ùå Documentation check failed: {e}")

    print("\n" + "=" * 80)
    print("Summary:")
    print("=" * 80)
    print("The download report endpoints are configured in the code:")
    print(f"  - POST {BASE_URL}/api/v1/baby/reports/generate")
    print(f"  - GET  {BASE_URL}/api/v1/baby/reports/download/{{report_id}}")
    print()
    print("These endpoints require authentication (user token).")
    print("The mobile app should:")
    print("  1. Include user auth token in requests")
    print("  2. Call POST /api/v1/baby/reports/generate with product data")
    print("  3. Receive download_url in response")
    print("  4. Use the download_url to fetch the PDF")
    print()
    print("Implementation Details:")
    print("  - Reports are generated by report_builder_agent")
    print("  - PDFs are stored in generated_reports/ directory")
    print("  - Download endpoint verifies user owns the report")
    print("  - Files can optionally be stored in S3")
    print("=" * 80)


if __name__ == "__main__":
    test_download_report_production()
