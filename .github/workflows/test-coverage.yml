name: Test Coverage

on:
  push:
    branches: [ main, develop, fix/** ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        python-version: ["3.10", "3.11"]
    
    env:
      PYTHONPATH: ${{ github.workspace }}
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        options: >-
          --health-cmd "pg_isready -U postgres"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Force PostgreSQL to use postgres user globally
      run: |
        echo "PGUSER=postgres" >> $GITHUB_ENV
        echo "PGPASSWORD=postgres" >> $GITHUB_ENV
        echo "PGDATABASE=test_db" >> $GITHUB_ENV
        echo "PGHOST=localhost" >> $GITHUB_ENV
        echo "PGPORT=5432" >> $GITHUB_ENV
        echo "PostgreSQL environment variables set globally"
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Set up Python path
      run: |
        echo "PYTHONPATH=${{ github.workspace }}" >> $GITHUB_ENV
        echo "Python path set to: ${{ github.workspace }}"
    
    - name: Install PostgreSQL dependencies
      run: |
        pip install psycopg2-binary
    
    - name: Initialize PostgreSQL database
      run: |
        python -c "
        import psycopg2
        import os
        
        # Connect to PostgreSQL
        conn = psycopg2.connect(
            host='localhost',
            port=5432,
            user='postgres',
            password='postgres',
            database='test_db'
        )
        cursor = conn.cursor()
        
        # Create recalls_enhanced table
        cursor.execute('''
        CREATE TABLE IF NOT EXISTS recalls_enhanced (
            id SERIAL PRIMARY KEY,
            recall_id TEXT,
            product_name TEXT,
            brand TEXT,
            manufacturer TEXT,
            model_number TEXT,
            upc TEXT,
            ean_code TEXT,
            gtin TEXT,
            article_number TEXT,
            lot_number TEXT,
            batch_number TEXT,
            serial_number TEXT,
            part_number TEXT,
            expiry_date TEXT,
            best_before_date TEXT,
            production_date TEXT,
            ndc_number TEXT,
            din_number TEXT,
            vehicle_make TEXT,
            vehicle_model TEXT,
            model_year TEXT,
            vin_range TEXT,
            registry_codes TEXT,
            country TEXT,
            regions_affected TEXT,
            recall_date TEXT,
            source_agency TEXT,
            hazard TEXT,
            hazard_category TEXT,
            recall_reason TEXT,
            remedy TEXT,
            recall_class TEXT,
            description TEXT,
            manufacturer_contact TEXT,
            url TEXT,
            search_keywords TEXT,
            agency_specific_data TEXT
        )
        ''')
        
        # Create legacy recalls table
        cursor.execute('''
        CREATE TABLE IF NOT EXISTS recalls (
            id SERIAL PRIMARY KEY,
            recall_id TEXT,
            product_name TEXT,
            brand TEXT,
            manufacturer TEXT,
            model_number TEXT,
            upc TEXT,
            country TEXT,
            recall_date TEXT,
            hazard_description TEXT,
            manufacturer_contact TEXT,
            source_agency TEXT,
            description TEXT,
            hazard TEXT,
            remedy TEXT,
            url TEXT
        )
        ''')
        
        # Insert test data into legacy recalls table
        cursor.execute('SELECT COUNT(*) FROM recalls')
        count = cursor.fetchone()[0]
        if count == 0:
            cursor.execute('''
            INSERT INTO recalls 
            (recall_id, product_name, brand, manufacturer, hazard, recall_date, source_agency, url, country, description)
            VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s, %s)
            ''', (
                'TEST-002', 
                'Baby Bottle', 
                'SafeBaby', 
                'SafeBaby Corp', 
                'Chemical hazard', 
                '2025-01-01', 
                'FDA', 
                'https://example.com/recall/test2', 
                'USA', 
                'Test recall for legacy table'
            ))
            print('✅ Inserted test data into legacy recalls table')
        
        # Create users table
        cursor.execute('''
        CREATE TABLE IF NOT EXISTS users (
            id SERIAL PRIMARY KEY,
            email TEXT UNIQUE NOT NULL,
            password_hash TEXT NOT NULL,
            is_active BOOLEAN DEFAULT TRUE,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        )
        ''')
        
        # Insert test data into recalls_enhanced table
        try:
            cursor.execute('SELECT COUNT(*) FROM recalls_enhanced')
            count = cursor.fetchone()[0]
            if count == 0:
                cursor.execute('''
                INSERT INTO recalls_enhanced 
                (recall_id, product_name, brand, manufacturer, hazard, recall_date, source_agency, url, country, description)
                VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s, %s)
                ''', (
                    'TEST-001', 
                    'Baby Pacifier', 
                    'SafeBaby', 
                    'SafeBaby Corp', 
                    'Choking hazard', 
                    '2025-01-01', 
                    'CPSC', 
                    'https://example.com/recall/test', 
                    'USA', 
                    'Test recall for CI smoke tests'
                ))
                print('✅ Inserted test recall data')
        except Exception as e:
            print(f'⚠️ Could not insert test data into recalls_enhanced: {e}')
        
        conn.commit()
        conn.close()
        print('✅ PostgreSQL database initialization complete')
        "
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-v2-${{ hashFiles('config/requirements/*.txt', 'tests/*.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-v2-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        # Clear pip cache to prevent issues from stale or incompatible cached packages,
        # which can occur if requirements have changed or if cached wheels are incompatible
        # with the current Python version. This helps avoid installation conflicts and ensures
        # dependencies are freshly installed.
        pip cache purge 2>/dev/null || echo "Skipping cache purge"
        # Install packaging first with its dependencies (no upper bound)
        pip install --force-reinstall 'packaging>=22.0'
        pip install -r requirements.txt
        pip install -r tests/requirements-test.txt
        # Verify packaging version using proper version comparison
        python -c "from packaging import version; import packaging; assert version.parse(packaging.__version__) >= version.parse('22.0'), f'packaging {packaging.__version__} < 22.0'"
    
    - name: Verify PostgreSQL connection settings
      run: |
        echo "=== PostgreSQL Environment Variables ==="
        echo "PGUSER: $PGUSER"
        echo "PGHOST: $PGHOST"
        echo "PGPORT: $PGPORT"
        echo "PGDATABASE: $PGDATABASE"
        echo "DATABASE_URL: ${DATABASE_URL:-not set}"
        echo ""
        echo "=== Testing PostgreSQL connection ==="
        python -c "import os; print(f'Python sees PGUSER: {os.environ.get(\"PGUSER\", \"NOT SET\")}'); print(f'Python sees DATABASE_URL: {os.environ.get(\"DATABASE_URL\", \"NOT SET\")}'); print(f'Current user from OS: {os.environ.get(\"USER\", \"NOT SET\")}')"
        echo "=== PostgreSQL connection test complete ==="
    
    - name: Verify critical imports
      env:
        PGPASSWORD: postgres
        PGUSER: postgres
        PGDATABASE: test_db
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db
      run: |
        # CRITICAL: Set PYTHONPATH cleanly without duplication
        export PYTHONPATH="${{ github.workspace }}"
        
        # Debug environment first
        echo "=== Directory Structure Debug ==="
        echo "Current directory: $(pwd)"
        echo "Workspace: ${{ github.workspace }}"
        echo "PYTHONPATH: $PYTHONPATH"
        echo ""
        echo "=== Listing root directory ==="
        ls -la
        echo ""
        echo "=== Checking core_infra ==="
        if [ -d "core_infra" ]; then
          echo "✓ core_infra directory exists"
          ls -la core_infra/ | head -20
          echo ""
          echo "=== Checking __init__.py ==="
          if [ -f "core_infra/__init__.py" ]; then
            echo "✓ core_infra/__init__.py exists"
            wc -l core_infra/__init__.py
          else
            echo "✗ core_infra/__init__.py NOT FOUND"
            exit 1
          fi
        else
          echo "✗ core_infra directory NOT FOUND"
          echo "This is a CRITICAL ERROR - core_infra must exist!"
          exit 1
        fi
        
        # Test critical imports
        echo ""
        echo "=== Testing Python imports ==="
        python -c "from core_infra.cache_manager import get_cache_stats; print('✅ Critical imports working')"
    
    - name: Run unit tests with coverage
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db
        REDIS_URL: redis://localhost:6379/0
        SECRET_KEY: test_secret_key_for_ci
        PYTHONPATH: ${{ github.workspace }}
        DISABLE_REDIS_WARNING: true
        PGUSER: postgres
        PGPASSWORD: postgres
        PGDATABASE: test_db
      run: |
        # Set clean PYTHONPATH without duplication
        export PYTHONPATH="${{ github.workspace }}"
        echo "Running tests with PYTHONPATH=$PYTHONPATH"
        pytest tests/unit/ \
          -v \
          --cov=. \
          --cov-report=xml \
          --cov-report=term-missing \
          -m unit
    
    - name: Run integration tests
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db
        REDIS_URL: redis://localhost:6379/0
        SECRET_KEY: test_secret_key_for_ci
        PYTHONPATH: ${{ github.workspace }}
        DISABLE_REDIS_WARNING: true
        PGUSER: postgres
        PGPASSWORD: postgres
        PGDATABASE: test_db
      run: |
        # Set clean PYTHONPATH
        export PYTHONPATH="${{ github.workspace }}"
        pytest tests/integration/ \
          -v \
          --cov=. \
          --cov-append \
          --cov-report=xml \
          --cov-report=term-missing \
          -m integration
    
    - name: Run security tests
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db
        SECRET_KEY: test_secret_key_for_ci
        PYTHONPATH: ${{ github.workspace }}
        DISABLE_REDIS_WARNING: true
        PGUSER: postgres
        PGPASSWORD: postgres
        PGDATABASE: test_db
      run: |
        # Set clean PYTHONPATH
        export PYTHONPATH="${{ github.workspace }}"
        pytest tests/security/ \
          -v \
          -m security
    
    - name: Run performance benchmarks
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db
        SECRET_KEY: test_secret_key_for_ci
        PYTHONPATH: ${{ github.workspace }}
        DISABLE_REDIS_WARNING: true
        PGUSER: postgres
        PGPASSWORD: postgres
        PGDATABASE: test_db
      run: |
        # Set clean PYTHONPATH
        export PYTHONPATH="${{ github.workspace }}"
        pytest tests/performance/ \
          -v \
          --benchmark-only \
          -m performance
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        files: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false
    
    - name: Generate coverage badge
      if: github.ref == 'refs/heads/main'
      run: |
        pip install coverage-badge
        coverage-badge -o coverage.svg -f
    
    - name: Comment coverage on PR
      if: github.event_name == 'pull_request'
      uses: py-cov-action/python-coverage-comment-action@v3
      with:
        GITHUB_TOKEN: ${{ github.token }}
        MINIMUM_GREEN: 80
        MINIMUM_ORANGE: 70

