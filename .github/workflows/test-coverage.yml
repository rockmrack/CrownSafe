name: Test Coverage

on:
  push:
    branches: [main, development]
  pull_request:
    branches: [main, development]

jobs:
  test:
    runs-on: ubuntu-latest
    timeout-minutes: 10

    services:
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: postgres
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pytest pytest-cov pytest-asyncio
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          if [ -f config/requirements/requirements-complete.txt ]; then pip install -r config/requirements/requirements-complete.txt; fi

      - name: Setup PostgreSQL database
        env:
          DATABASE_URL: "postgresql://postgres:postgres@localhost:5432/postgres"
          DB_USERNAME: "postgres"
          DB_PASSWORD: "postgres"
          DB_HOST: "localhost"
          DB_PORT: "5432"
          DB_NAME: "postgres"
          ENVIRONMENT: "test"
        run: |
          # Install PostgreSQL client
          sudo apt-get update
          sudo apt-get install -y postgresql-client

          # Enable pg_trgm extension
          PGPASSWORD=postgres psql -h localhost -U postgres -d postgres -c "CREATE EXTENSION IF NOT EXISTS pg_trgm;"

          # Initialize database with script (creates tables if migrations fail)
          python scripts/init_test_database.py

          # Try to run Alembic migrations (alembic.ini is in db/ directory)
          # Note: DATABASE_URL env var must be available for alembic
          cd db && DATABASE_URL="postgresql://postgres:postgres@localhost:5432/postgres" alembic upgrade head || echo "Migrations failed or not needed, using direct table creation"

      - name: Run tests with coverage
        timeout-minutes: 8
        env:
          DATABASE_URL: "postgresql://postgres:postgres@localhost:5432/postgres"
          DB_USERNAME: "postgres"
          DB_PASSWORD: "postgres"
          DB_HOST: "localhost"
          DB_PORT: "5432"
          DB_NAME: "postgres"
          ENVIRONMENT: "test"
          BS_FEATURE_CHAT_ENABLED: "true"
          BS_FEATURE_CHAT_ROLLOUT_PCT: "1.0"
          REDIS_URL: "redis://localhost:6379/0"
          REDIS_CACHE_URL: "redis://localhost:6379/0"
          RATE_LIMIT_REDIS_URL: "redis://localhost:6379/0"
        run: |
          pytest tests/security/ tests/core/ -v --cov=. --cov-report=term-missing --cov-fail-under=10 -x

      - name: Upload coverage reports
        if: always()
        uses: codecov/codecov-action@v5
        with:
          fail_ci_if_error: false
