name: Test Coverage

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        python-version: ["3.10", "3.11"]
    
    env:
      PYTHONPATH: ${{ github.workspace }}
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Set up Python path
      run: |
        echo "PYTHONPATH=${{ github.workspace }}" >> $GITHUB_ENV
        echo "Python path set to: ${{ github.workspace }}"
    
    - name: Verify project structure
      run: |
        echo "=== Workspace directory ==="
        pwd
        echo "=== Checking for api module ==="
        ls -la api/ || echo "api directory not found"
        ls -la api/main_babyshield.py || echo "main_babyshield.py not found"
        echo "=== Python version ==="
        python --version
        echo "=== PYTHONPATH ==="
        echo $PYTHONPATH
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('config/requirements/*.txt', 'tests/*.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r config/requirements/requirements.txt
        pip install -r tests/requirements-test.txt
        pip install --upgrade 'packaging>=22.0'
    
    - name: Run unit tests with coverage
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db
        REDIS_URL: redis://localhost:6379/0
        SECRET_KEY: test_secret_key_for_ci
        PYTHONPATH: ${{ github.workspace }}
      run: |
        pytest tests/unit/ \
          -v \
          --cov=. \
          --cov-report=xml \
          --cov-report=term-missing \
          --cov-fail-under=80 \
          -m unit
    
    - name: Run integration tests
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db
        REDIS_URL: redis://localhost:6379/0
        SECRET_KEY: test_secret_key_for_ci
        PYTHONPATH: ${{ github.workspace }}
      run: |
        pytest tests/integration/ \
          -v \
          --cov=. \
          --cov-append \
          --cov-report=xml \
          --cov-report=term-missing \
          -m integration
    
    - name: Run security tests
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db
        SECRET_KEY: test_secret_key_for_ci
        PYTHONPATH: ${{ github.workspace }}
      run: |
        pytest tests/security/ \
          -v \
          -m security
    
    - name: Run performance benchmarks
      env:
        DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db
        SECRET_KEY: test_secret_key_for_ci
        PYTHONPATH: ${{ github.workspace }}
      run: |
        pytest tests/performance/ \
          -v \
          --benchmark-only \
          -m performance
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        files: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: true
    
    - name: Generate coverage badge
      if: github.ref == 'refs/heads/main'
      run: |
        pip install coverage-badge
        coverage-badge -o coverage.svg -f
    
    - name: Comment coverage on PR
      if: github.event_name == 'pull_request'
      uses: py-cov-action/python-coverage-comment-action@v3
      with:
        GITHUB_TOKEN: ${{ github.token }}
        MINIMUM_GREEN: 95
        MINIMUM_ORANGE: 90

