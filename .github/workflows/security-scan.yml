name: Security Scanning

# Required permissions for CodeQL and security scanning
permissions:
  contents: read
  security-events: write
  actions: read

on:
  push:
    branches: [main, development]
  pull_request:
    branches: [main]
  schedule:
    # Run daily at 2 AM UTC
    - cron: "0 2 * * *"
  workflow_dispatch:

env:
  PYTHON_VERSION: "3.11"

jobs:
  # ============================================
  # 1. Python Dependency Scanning
  # ============================================
  dependency-scan:
    name: Python Dependency Security Scan
    runs-on: ubuntu-latest
    timeout-minutes: 30

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      # Safety - Python dependency vulnerability scanner
      - name: Install Safety
        run: |
          pip install safety
          pip install pip-audit
          pip install bandit

      - name: Run Safety Check
        continue-on-error: true
        run: |
          safety check --json --output safety-report.json || true
          safety check || true

      - name: Run pip-audit
        continue-on-error: true
        run: |
          pip-audit --desc --fix --dry-run

      - name: Run Bandit Security Linter
        continue-on-error: true
        run: |
          bandit -r . -f json -o bandit-report.json --severity-level medium || true
          bandit -r . --severity-level high || true

      # Upload reports
      - name: Upload Security Reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: python-security-reports
          path: |
            safety-report.json
            bandit-report.json

      # OWASP Dependency Check
      - name: Run OWASP Dependency Check
        continue-on-error: true
        timeout-minutes: 20
        uses: dependency-check/Dependency-Check_Action@main
        with:
          project: "BabyShield"
          path: "."
          format: "HTML"
          args: >
            --enableRetired
            --enableExperimental

      - name: Upload OWASP Report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: owasp-dependency-check
          path: reports/

  # ============================================
  # 2. Container Image Scanning
  # ============================================
  container-scan:
    name: Docker Container Security Scan
    runs-on: ubuntu-latest
    timeout-minutes: 15 # Reduced from 25 to fail faster

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      # Build Docker image for scanning
      - name: Build Docker Image
        continue-on-error: false
        timeout-minutes: 10 # Reduced from 15
        run: |
          # Use BuildKit for faster builds
          export DOCKER_BUILDKIT=1
          docker build -f Dockerfile.final -t babyshield-backend:scan . --progress=plain

      # Clear space and cache before Trivy scan
      - name: Free Disk Space
        run: |
          # Remove unnecessary files to free up space
          sudo rm -rf /usr/share/dotnet
          sudo rm -rf /opt/ghc
          sudo rm -rf "/usr/local/share/boost"
          sudo rm -rf "$AGENT_TOOLSDIRECTORY"
          df -h

      # Trivy Scanner - Comprehensive vulnerability scanner
      - name: Run Trivy vulnerability scanner
        continue-on-error: true # Don't block on disk space issues
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: "babyshield-backend:scan"
          format: "sarif"
          output: "trivy-results.sarif"
          severity: "CRITICAL,HIGH,MEDIUM"
          exit-code: "0" # Don't fail the build
        env:
          TRIVY_SKIP_DB_UPDATE: "false"
          TRIVY_SKIP_JAVA_DB_UPDATE: "true"

      - name: Upload Trivy results to GitHub Security
        if: always()
        continue-on-error: true
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: "trivy-results.sarif"

      # Snyk Container Scanning (requires SNYK_TOKEN secret)
      - name: Run Snyk Container Test
        continue-on-error: true
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        run: |
          if [ ! -z "$SNYK_TOKEN" ]; then
            npm install -g snyk
            snyk container test babyshield-backend:scan --severity-threshold=medium --json > snyk-container.json || true
            snyk container test babyshield-backend:scan --severity-threshold=high || true
          else
            echo "Snyk token not configured, skipping Snyk scan"
          fi

      # Grype Scanner - Alternative vulnerability scanner
      - name: Run Grype vulnerability scanner
        continue-on-error: true # Don't block on scanner failures
        uses: anchore/scan-action@v3
        with:
          image: "babyshield-backend:scan"
          fail-build: false
          severity-cutoff: high

      - name: Upload Grype results
        if: always()
        continue-on-error: true # Don't block if Advanced Security not available
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: results.sarif

  # ============================================
  # 3. Secret Detection
  # ============================================
  secret-scan:
    name: Secret Detection Scan
    runs-on: ubuntu-latest
    timeout-minutes: 20

    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        with:
          fetch-depth: 0 # Full history for secret scanning

      # GitLeaks - Detect secrets in code
      - name: Run GitLeaks
        continue-on-error: true
        run: |
          # Install gitleaks
          wget https://github.com/gitleaks/gitleaks/releases/download/v8.18.0/gitleaks_8.18.0_linux_x64.tar.gz
          tar -xzf gitleaks_8.18.0_linux_x64.tar.gz
          chmod +x gitleaks

          # Run gitleaks scan
          ./gitleaks detect --source . --verbose --no-git --config .gitleaksignore || echo "GitLeaks completed with findings"

      # TruffleHog - Deep secret scanning
      - name: Check for commits to scan
        id: check_commits
        run: |
          BASE="${{ github.event.before }}"
          HEAD="${{ github.sha }}"

          # For pull requests, use different base
          if [ "${{ github.event_name }}" == "pull_request" ]; then
            BASE="${{ github.event.pull_request.base.sha }}"
            HEAD="${{ github.event.pull_request.head.sha }}"
          fi

          # For push to main, check if we have a valid base
          if [ -z "$BASE" ] || [ "$BASE" == "0000000000000000000000000000000000000000" ]; then
            BASE="HEAD~1"
          fi

          echo "base=$BASE" >> $GITHUB_OUTPUT
          echo "head=$HEAD" >> $GITHUB_OUTPUT

          # Check if base and head are the same
          if [ "$BASE" == "$HEAD" ]; then
            echo "skip=true" >> $GITHUB_OUTPUT
            echo "No new commits to scan (BASE == HEAD)"
          else
            echo "skip=false" >> $GITHUB_OUTPUT
            echo "Will scan from $BASE to $HEAD"
          fi

      - name: TruffleHog OSS
        if: steps.check_commits.outputs.skip == 'false'
        continue-on-error: true
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: ${{ steps.check_commits.outputs.base }}
          head: ${{ steps.check_commits.outputs.head }}
          extra_args: --debug --only-verified

      # detect-secrets
      - name: Detect Secrets
        run: |
          pip install detect-secrets
          detect-secrets scan --baseline .secrets.baseline || true
          detect-secrets audit .secrets.baseline || true

  # ============================================
  # 4. SAST - Static Application Security Testing
  # ============================================
  sast-scan:
    name: SAST Security Analysis
    runs-on: ubuntu-latest
    timeout-minutes: 30

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      # Semgrep - Static analysis
      - name: Run Semgrep
        continue-on-error: true
        uses: returntocorp/semgrep-action@v1
        with:
          config: >
            p/security-audit
            p/python
            p/owasp-top-ten
            p/dockerfile
            p/sql-injection
        env:
          SEMGREP_APP_TOKEN: ${{ secrets.SEMGREP_APP_TOKEN }}

      # CodeQL Analysis
      - name: Initialize CodeQL
        continue-on-error: true # Don't block if Advanced Security not available
        uses: github/codeql-action/init@v3
        with:
          languages: python
          queries: security-and-quality

      - name: Perform CodeQL Analysis
        continue-on-error: true # Don't block if Advanced Security not available
        uses: github/codeql-action/analyze@v3

      # Custom security checks
      - name: Custom Security Checks
        continue-on-error: true # Don't block workflow on warnings
        run: |
          # Check for hardcoded passwords in production code (exclude tests, scripts, and test helpers)
          echo "🔍 Checking for hardcoded passwords in production code..."

          # Search production directories but exclude test/seed functions
          if grep -r "password\s*=\s*[\"'][^\"']*[\"']" --include="*.py" \
            --exclude-dir=tests \
            --exclude-dir=scripts \
            --exclude-dir=.pytest_cache \
            --exclude-dir=__pycache__ \
            . 2>/dev/null | \
            grep -v "test" | \
            grep -v "seed" | \
            grep -v "fixture" | \
            grep -v "mock" | \
            grep -v "#.*password"; then
            echo "⚠️  Warning: Hardcoded passwords found in production code (excluding test helpers)"
            echo "📝 Review these carefully - test helpers are allowed, but production code should use env vars"
            # Don't fail - just warn
          else
            echo "✅ No hardcoded passwords found in production code (test helpers excluded)"
          fi

          # Check for SQL injection vulnerabilities
          echo "🔍 Checking for SQL injection patterns..."
          if grep -r "execute.*%s\|execute.*format\|execute.*\+" --include="*.py" \
            --exclude-dir=tests \
            --exclude-dir=scripts \
            . 2>/dev/null; then
            echo "⚠️  Warning: Potential SQL injection patterns found"
          else
            echo "✅ No SQL injection patterns detected"
          fi

          # Check for debug mode in production
          echo "🔍 Checking for debug mode..."
          if grep -r "DEBUG\s*=\s*True" --include="*.py" \
            --exclude-dir=tests \
            --exclude-dir=scripts \
            . 2>/dev/null; then
            echo "⚠️  Warning: Debug mode enabled in production code"
          else
            echo "✅ Debug mode not enabled"
          fi

          echo "✅ Custom security checks completed"

  # ============================================
  # 5. Infrastructure as Code Scanning
  # ============================================
  iac-scan:
    name: Infrastructure Security Scan
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      # Checkov - IaC security scanner
      - name: Run Checkov
        uses: bridgecrewio/checkov-action@master
        with:
          directory: .
          framework: dockerfile,github_actions,json,yaml
          quiet: false
          soft_fail: true
          skip_check: CKV_DOCKER_2,CKV_DOCKER_3 # Skip specific checks if needed

      # Terrascan (if using Terraform)
      - name: Run Terrascan
        continue-on-error: true
        run: |
          if [ -d "terraform" ]; then
            docker run --rm -v "$(pwd):/src" tenable/terrascan scan -t aws -d /src/terraform
          else
            echo "No Terraform files found, skipping Terrascan"
          fi

  # ============================================
  # 6. License Compliance Check
  # ============================================
  license-check:
    name: License Compliance Check
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install pip-licenses
        run: pip install pip-licenses

      - name: Check licenses
        run: |
          pip install -r requirements.txt
          pip-licenses --from=mixed --format=json --output-file=licenses.json
          pip-licenses --from=mixed --fail-on="GPL;LGPL;AGPL;MPL"

  # ============================================
  # 7. Security Summary Report
  # ============================================
  security-report:
    name: Security Summary Report
    runs-on: ubuntu-latest
    permissions:
      issues: write # Allow creating issues
      contents: read
    needs:
      [
        dependency-scan,
        container-scan,
        secret-scan,
        sast-scan,
        iac-scan,
        license-check,
      ]
    if: always()

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: security-reports

      - name: Generate Security Summary
        run: |
          echo "# Security Scan Summary" > security-summary.md
          echo "" >> security-summary.md
          echo "Date: $(date)" >> security-summary.md
          echo "Branch: ${{ github.ref }}" >> security-summary.md
          echo "Commit: ${{ github.sha }}" >> security-summary.md
          echo "" >> security-summary.md

          echo "## Scan Results" >> security-summary.md
          echo "" >> security-summary.md

          # Check job results
          echo "| Scan Type | Status |" >> security-summary.md
          echo "|-----------|--------|" >> security-summary.md
          echo "| Dependency Scan | ${{ needs.dependency-scan.result }} |" >> security-summary.md
          echo "| Container Scan | ${{ needs.container-scan.result }} |" >> security-summary.md
          echo "| Secret Scan | ${{ needs.secret-scan.result }} |" >> security-summary.md
          echo "| SAST Scan | ${{ needs.sast-scan.result }} |" >> security-summary.md
          echo "| IaC Scan | ${{ needs.iac-scan.result }} |" >> security-summary.md
          echo "| License Check | ${{ needs.license-check.result }} |" >> security-summary.md
          echo "" >> security-summary.md

          # Add recommendations
          echo "## Recommendations" >> security-summary.md
          echo "" >> security-summary.md
          echo "1. Review all HIGH and CRITICAL vulnerabilities" >> security-summary.md
          echo "2. Update dependencies regularly" >> security-summary.md
          echo "3. Rotate secrets every 90 days" >> security-summary.md
          echo "4. Enable branch protection rules" >> security-summary.md
          echo "5. Configure CODEOWNERS file" >> security-summary.md

      - name: Upload Security Summary
        uses: actions/upload-artifact@v4
        with:
          name: security-summary
          path: security-summary.md

      # Create issue for critical findings (optional)
      - name: Create Security Issue
        if: |
          needs.dependency-scan.result == 'failure' ||
          needs.container-scan.result == 'failure' ||
          needs.secret-scan.result == 'failure'
        uses: actions/github-script@v7
        with:
          script: |
            const title = `Security Alert: Vulnerabilities Detected - ${new Date().toISOString().split('T')[0]}`;
            const body = `
            ## Security Scan Alert

            Critical security issues were detected in the latest scan.

            **Scan Results:**
            - Dependency Scan: ${{ needs.dependency-scan.result }}
            - Container Scan: ${{ needs.container-scan.result }}
            - Secret Scan: ${{ needs.secret-scan.result }}
            - SAST Scan: ${{ needs.sast-scan.result }}

            **Action Required:**
            1. Review the security reports in the workflow artifacts
            2. Address all CRITICAL and HIGH vulnerabilities
            3. Update this issue when resolved

            Workflow Run: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
            `;

            github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: title,
              body: body,
              labels: ['security', 'critical']
            });
