name: Crown Safe CI/CD Pipeline

on:
    push:
        branches: [main, staging, develop]
    pull_request:
        branches: [main, staging]
    schedule:
        # Run automated tests daily at 2 AM UTC
        - cron: "0 2 * * *"

env:
    PYTHON_VERSION: "3.11"
    DOCKER_REGISTRY: crownsaferegistry.azurecr.io
    IMAGE_NAME: crownsafe-api

jobs:
    # Job 1: Code Quality & Linting
    code-quality:
        name: Code Quality & Linting
        runs-on: ubuntu-latest

        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Set up Python
              uses: actions/setup-python@v4
              with:
                  python-version: ${{ env.PYTHON_VERSION }}

            - name: Install dependencies
              run: |
                  python -m pip install --upgrade pip
                  pip install ruff black mypy

            - name: Run Ruff linting
              run: ruff check .
              continue-on-error: true

            - name: Run Black formatting check
              run: black --check .
              continue-on-error: true

            - name: Run type checking with mypy
              run: mypy . --ignore-missing-imports
              continue-on-error: true

    # Job 2: Security Scanning
    security-scan:
        name: Security Vulnerability Scan
        runs-on: ubuntu-latest

        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Run Snyk security scan
              uses: snyk/actions/python@master
              env:
                  SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
              with:
                  args: --severity-threshold=high
              continue-on-error: true

            - name: Run OWASP Dependency Check
              uses: dependency-check/Dependency-Check_Action@main
              with:
                  project: "Crown Safe API"
                  path: "."
                  format: "HTML"
              continue-on-error: true

    # Job 3: Unit Tests
    unit-tests:
        name: Unit Tests
        runs-on: ubuntu-latest

        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Set up Python
              uses: actions/setup-python@v4
              with:
                  python-version: ${{ env.PYTHON_VERSION }}

            - name: Install dependencies
              run: |
                  python -m pip install --upgrade pip
                  pip install -r config/requirements/requirements.txt

            - name: Run pytest with coverage
              run: |
                  pytest -v --cov=. --cov-report=xml --cov-report=term-missing
              env:
                  DATABASE_URL: postgresql://test:test@localhost:5432/test_db

            - name: Upload coverage to Codecov
              uses: codecov/codecov-action@v3
              with:
                  file: ./coverage.xml
                  flags: unittests
                  name: crown-safe-coverage

    # Job 4: Integration Tests
    integration-tests:
        name: Integration Tests
        runs-on: ubuntu-latest

        services:
            postgres:
                image: postgres:15
                env:
                    POSTGRES_USER: test
                    POSTGRES_PASSWORD: test
                    POSTGRES_DB: test_db
                options: >-
                    --health-cmd pg_isready
                    --health-interval 10s
                    --health-timeout 5s
                    --health-retries 5
                ports:
                    - 5432:5432

            redis:
                image: redis:7
                options: >-
                    --health-cmd "redis-cli ping"
                    --health-interval 10s
                    --health-timeout 5s
                    --health-retries 5
                ports:
                    - 6379:6379

        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Set up Python
              uses: actions/setup-python@v4
              with:
                  python-version: ${{ env.PYTHON_VERSION }}

            - name: Install dependencies
              run: |
                  python -m pip install --upgrade pip
                  pip install -r config/requirements/requirements.txt

            - name: Run database migrations
              run: |
                  alembic upgrade head
              env:
                  DATABASE_URL: postgresql://test:test@localhost:5432/test_db

            - name: Run integration tests
              run: |
                  pytest -v -m integration tests/
              env:
                  DATABASE_URL: postgresql://test:test@localhost:5432/test_db
                  REDIS_URL: redis://localhost:6379/0

    # Job 5: Performance Tests
    performance-tests:
        name: Performance & Load Tests
        runs-on: ubuntu-latest
        needs: [unit-tests, integration-tests]

        services:
            postgres:
                image: postgres:15
                env:
                    POSTGRES_USER: test
                    POSTGRES_PASSWORD: test
                    POSTGRES_DB: test_db
                options: >-
                    --health-cmd pg_isready
                    --health-interval 10s
                    --health-timeout 5s
                    --health-retries 5
                ports:
                    - 5432:5432

        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Set up Python
              uses: actions/setup-python@v4
              with:
                  python-version: ${{ env.PYTHON_VERSION }}

            - name: Install dependencies
              run: |
                  python -m pip install --upgrade pip
                  pip install -r config/requirements/requirements.txt

            - name: Start API server
              run: |
                  uvicorn api.main_crownsafe:app --host 0.0.0.0 --port 8001 &
                  sleep 10
              env:
                  DATABASE_URL: postgresql://test:test@localhost:5432/test_db

            - name: Run load tests
              run: |
                  python tests/performance/load_test.py
              continue-on-error: true

            - name: Upload performance results
              uses: actions/upload-artifact@v3
              with:
                  name: performance-results
                  path: performance_results.json

    # Job 6: Build Docker Image
    build-docker:
        name: Build Docker Image
        runs-on: ubuntu-latest
        needs: [code-quality, security-scan, unit-tests]

        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Set up Docker Buildx
              uses: docker/setup-buildx-action@v3

            - name: Log in to Azure Container Registry
              uses: docker/login-action@v3
              with:
                  registry: ${{ env.DOCKER_REGISTRY }}
                  username: ${{ secrets.ACR_USERNAME }}
                  password: ${{ secrets.ACR_PASSWORD }}

            - name: Extract metadata
              id: meta
              uses: docker/metadata-action@v5
              with:
                  images: ${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }}
                  tags: |
                      type=ref,event=branch
                      type=ref,event=pr
                      type=sha,prefix={{branch}}-
                      type=semver,pattern={{version}}
                      type=raw,value=latest,enable={{is_default_branch}}

            - name: Build and push Docker image
              uses: docker/build-push-action@v5
              with:
                  context: .
                  file: ./Dockerfile.final
                  push: ${{ github.event_name != 'pull_request' }}
                  tags: ${{ steps.meta.outputs.tags }}
                  labels: ${{ steps.meta.outputs.labels }}
                  cache-from: type=registry,ref=${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }}:buildcache
                  cache-to: type=registry,ref=${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }}:buildcache,mode=max

    # Job 7: Deploy to Staging (Auto-deploy on main branch)
    deploy-staging:
        name: Deploy to Staging
        runs-on: ubuntu-latest
        needs: [build-docker, integration-tests]
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        environment:
            name: staging
            url: https://staging.crownsafe.cureviax.ai

        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Azure Login
              uses: azure/login@v1
              with:
                  creds: ${{ secrets.AZURE_CREDENTIALS }}

            - name: Deploy to Azure Container Instances (Staging)
              uses: azure/CLI@v1
              with:
                  inlineScript: |
                      az container create \
                        --resource-group crownsafe-rg \
                        --name crownsafe-api-staging \
                        --image ${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }}:main-${{ github.sha }} \
                        --cpu 2 \
                        --memory 4 \
                        --registry-login-server ${{ env.DOCKER_REGISTRY }} \
                        --registry-username ${{ secrets.ACR_USERNAME }} \
                        --registry-password ${{ secrets.ACR_PASSWORD }} \
                        --dns-name-label crownsafe-staging \
                        --ports 8001 \
                        --environment-variables \
                          DATABASE_URL='${{ secrets.STAGING_DATABASE_URL }}' \
                          REDIS_URL='${{ secrets.STAGING_REDIS_URL }}' \
                          AZURE_STORAGE_CONNECTION_STRING='${{ secrets.STAGING_AZURE_STORAGE }}' \
                        --restart-policy Always

            - name: Wait for deployment
              run: sleep 30

            - name: Health check
              run: |
                  curl -f https://staging.crownsafe.cureviax.ai/health || exit 1
                  curl -f https://staging.crownsafe.cureviax.ai/api/healthz || exit 1

    # Job 8: Deploy to Production (Manual approval required)
    deploy-production:
        name: Deploy to Production
        runs-on: ubuntu-latest
        needs: [deploy-staging, performance-tests]
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        environment:
            name: production
            url: https://crownsafe.cureviax.ai

        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Azure Login
              uses: azure/login@v1
              with:
                  creds: ${{ secrets.AZURE_CREDENTIALS }}

            - name: Create database backup
              run: |
                  python scripts/automated_backup.py
              env:
                  DATABASE_URL: ${{ secrets.PRODUCTION_DATABASE_URL }}
                  AZURE_STORAGE_CONNECTION_STRING: ${{ secrets.PRODUCTION_AZURE_STORAGE }}

            - name: Deploy to Azure Container Instances (Production)
              uses: azure/CLI@v1
              with:
                  inlineScript: |
                      az container create \
                        --resource-group crownsafe-rg \
                        --name crownsafe-api-production \
                        --image ${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }}:main-${{ github.sha }} \
                        --cpu 4 \
                        --memory 8 \
                        --registry-login-server ${{ env.DOCKER_REGISTRY }} \
                        --registry-username ${{ secrets.ACR_USERNAME }} \
                        --registry-password ${{ secrets.ACR_PASSWORD }} \
                        --dns-name-label crownsafe-production \
                        --ports 8001 \
                        --environment-variables \
                          DATABASE_URL='${{ secrets.PRODUCTION_DATABASE_URL }}' \
                          REDIS_URL='${{ secrets.PRODUCTION_REDIS_URL }}' \
                          AZURE_STORAGE_CONNECTION_STRING='${{ secrets.PRODUCTION_AZURE_STORAGE }}' \
                        --restart-policy Always

            - name: Wait for deployment
              run: sleep 30

            - name: Health check
              run: |
                  curl -f https://crownsafe.cureviax.ai/health || exit 1
                  curl -f https://crownsafe.cureviax.ai/api/healthz || exit 1

            - name: Notify deployment
              uses: actions/github-script@v7
              with:
                  script: |
                      github.rest.issues.createComment({
                        issue_number: context.issue.number,
                        owner: context.repo.owner,
                        repo: context.repo.repo,
                        body: '🚀 Deployed to production: https://crownsafe.cureviax.ai'
                      })

    # Job 9: Automated Backup (Daily)
    automated-backup:
        name: Automated Database Backup
        runs-on: ubuntu-latest
        if: github.event_name == 'schedule'

        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Set up Python
              uses: actions/setup-python@v4
              with:
                  python-version: ${{ env.PYTHON_VERSION }}

            - name: Install dependencies
              run: |
                  python -m pip install --upgrade pip
                  pip install -r config/requirements/requirements.txt

            - name: Run automated backup
              run: |
                  python scripts/automated_backup.py
              env:
                  DATABASE_URL: ${{ secrets.PRODUCTION_DATABASE_URL }}
                  AZURE_STORAGE_CONNECTION_STRING: ${{ secrets.PRODUCTION_AZURE_STORAGE }}

            - name: Notify on failure
              if: failure()
              uses: actions/github-script@v7
              with:
                  script: |
                      github.rest.issues.create({
                        owner: context.repo.owner,
                        repo: context.repo.repo,
                        title: '⚠️ Automated backup failed',
                        body: 'The scheduled database backup failed. Please investigate.',
                        labels: ['backup', 'critical']
                      })
